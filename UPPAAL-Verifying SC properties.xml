<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
bool synch =0;

bool ef= 1;
//bool checker=0;
//const int NumbTasks = 5;

//num_apps shows number of templates or systems that we want to have for applications which are local or internal to us. It also shows the number of values in the internal value array
const int num_apps = 2;

//num_ext_apps shows number of values in the external_value array.
const int num_ext_apps=1;

// right now I dont know why I defined that! just to show that for this system we have 1 storage container.
const int num_sapp = 1;

// identifier for applications (internal apps)
int [0,num_apps-1] id;

// channel between application and the application trigger.
//broadcast chan next;
//chan update_L_to_SC, update_SC_to_L, update_int, update_ext;
urgent chan update_L_to_SC, update_SC_to_L;
chan error[num_apps+num_sapp];
chan recovery[num_apps+num_sapp];
//broadcast chan NodeFailure [num_apps+num_sapp], NodeRecovery[num_apps+num_sapp];

//broadcast chan all_up,LS,FS;
//broadcast chan NodeFailure,NodeRecovery; 

//chan send;
// intternal_value is an array that represent the state values of applications which are local to us.
int  [0,3] internal_value [num_apps];

int [0,3] last_committed [num_apps];
int [0,3] pre_last[num_apps];

//shared_environment that is a conctenation of internal and external values.
//int shared_state_var[num_apps][num_ext_apps] = { { 0, 0 }, { 0} };

int [0,3] rep_data_struct[num_apps+num_ext_apps];
// g_state_var is the same as shared_state_var but it is in a global level and the values in this multidimentional array are committed.

//int g_state_var[num_apps][num_ext_apps] = { { 0, 0 }, { 0} };
int [0,3] l_rep_data_struct[num_apps+num_ext_apps];

</declaration>
	<template>
		<name x="5" y="5">Application</name>
		<parameter>int id, int Fid</parameter>
		<declaration>// Place local declarations here.
int external_state [num_ext_apps];

bool value_check()
{
bool zero=false;

    if (internal_value[id]==0){
    zero = true;
    }

return zero;
}






bool is_internal_state_empty()
{
bool empty =false;
    if (rep_data_struct[0]== 0 &amp;&amp; rep_data_struct[1]== 0 ){

    empty = true;
    }
return empty;
}



void fetch_internally()
{
internal_value[id]:=rep_data_struct[id];
}

void internal_change()
{
internal_value[id]:=(internal_value[id]+1)%3;
//last_internal_value[id]:=internal_value[id];
}

void commit_internal_state()
{
rep_data_struct[id]:=internal_value[id];
last_committed[id]:=internal_value[id];
pre_last[id]:=internal_value[id];
}


void fetch_external()
{
external_state[0]:=rep_data_struct[2];
}



void reset_internal_state()
{
internal_value[id]:=0;
ef:=0;
}



void value_inc()
{
rep_data_struct[id]:=internal_value[id];
last_committed[id]:=internal_value[id];
internal_value[id]:=internal_value[id]+1;
}</declaration>
		<location id="id0" x="-433" y="-467">
			<name x="-443" y="-501">Failure</name>
		</location>
		<location id="id1" x="-459" y="-187">
			<name x="-629" y="-195">Rep_data_struct_write</name>
			<committed/>
		</location>
		<location id="id2" x="-340" y="-314">
			<name x="-399" y="-348">Volume_write</name>
			<committed/>
		</location>
		<location id="id3" x="-561" y="-314">
			<name x="-578" y="-340">App_execution</name>
		</location>
		<location id="id4" x="-790" y="-314">
			<name x="-918" y="-314">App_deployment</name>
			<committed/>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-432" y="-297">commit_internal_state()</label>
			<nail x="-450" y="-280"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-832" y="-518">recovery[Fid]?</label>
			<nail x="-433" y="-501"/>
			<nail x="-850" y="-501"/>
			<nail x="-850" y="-314"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-543" y="-484">error[Fid]?</label>
			<label kind="assignment" x="-595" y="-459">reset_internal_state()</label>
			<nail x="-561" y="-467"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-415" y="-450">error[Fid]?</label>
			<label kind="assignment" x="-415" y="-433">reset_internal_state()</label>
			<nail x="-340" y="-433"/>
			<nail x="-433" y="-433"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-323" y="-212">error[Fid]?</label>
			<label kind="assignment" x="-441" y="-187">reset_internal_state()</label>
			<nail x="-229" y="-187"/>
			<nail x="-229" y="-467"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-705" y="-408">is_internal_state_empty()</label>
			<nail x="-680" y="-442"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="assignment" x="-543" y="-250">fetch_external()</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-425" y="-263">value_check()</label>
			<label kind="assignment" x="-416" y="-246">value_inc()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="assignment" x="-543" y="-314">internal_change()</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-807" y="-297">is_internal_state_empty() == false</label>
			<label kind="assignment" x="-772" y="-314">fetch_internally()</label>
		</transition>
	</template>
	<template>
		<name>App_Failure</name>
		<parameter>int Fid</parameter>
		<declaration>clock x;

void reset_internal_state()
{
//internal_value[id]:=0;
ef:=0;
}

</declaration>
		<location id="id5" x="-731" y="-212">
			<name x="-705" y="-221">App_Failure</name>
			<committed/>
		</location>
		<location id="id6" x="-952" y="-212">
			<name x="-1003" y="-255">Working</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-780" y="-276">ef==0</label>
			<label kind="synchronisation" x="-875" y="-323">recovery[Fid]!</label>
			<label kind="assignment" x="-850" y="-306">ef:=1</label>
			<nail x="-798" y="-272"/>
			<nail x="-858" y="-272"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-875" y="-187">ef==1</label>
			<label kind="synchronisation" x="-892" y="-203">error[Fid]!</label>
			<label kind="assignment" x="-934" y="-212">reset_internal_state()</label>
		</transition>
	</template>
	<template>
		<name>Node_Failure</name>
		<declaration>void empty_rep_data_struct()
{
internal_value[id]:=0;
rep_data_struct[0]:=0;
rep_data_struct[1]:=0;
rep_data_struct[2]:=0;
internal_value[0]:=0;
ef:=0;
}</declaration>
		<location id="id7" x="-501" y="-144">
			<name x="-511" y="-178">All_recovered</name>
			<committed/>
		</location>
		<location id="id8" x="-382" y="-144">
			<committed/>
		</location>
		<location id="id9" x="-280" y="-144">
			<committed/>
		</location>
		<location id="id10" x="-178" y="-238">
			<name x="-188" y="-272">Node_Failure</name>
		</location>
		<location id="id11" x="-289" y="-238">
			<committed/>
		</location>
		<location id="id12" x="-391" y="-238">
			<committed/>
		</location>
		<location id="id13" x="-493" y="-238">
			<committed/>
		</location>
		<location id="id14" x="-646" y="-238">
			<name x="-671" y="-289">Working</name>
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id7"/>
			<target ref="id14"/>
			<label kind="assignment" x="-628" y="-144">ef:=1</label>
			<nail x="-646" y="-144"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-484" y="-136">recovery[2]!</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-365" y="-136">recovery[1]!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-238" y="-136">recovery[0]!</label>
			<nail x="-178" y="-144"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-365" y="-272">error[2]!</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-476" y="-272">error[1]!</label>
			<label kind="assignment" x="-476" y="-221">internal_value[1]:=0</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-628" y="-263">ef==1</label>
			<label kind="synchronisation" x="-586" y="-272">error[0]!</label>
			<label kind="assignment" x="-637" y="-221">empty_rep_data_struct()</label>
		</transition>
	</template>
	<template>
		<name>Storage</name>
		<parameter>int Fid</parameter>
		<declaration>
clock y;
bool is_rep_data_struct_empty()
{
bool empty =false;
    if (rep_data_struct[0]== 0 &amp;&amp; rep_data_struct[1]== 0 &amp;&amp; rep_data_struct[2]== 0){

empty = true;
    }
return empty;
}


const int App1_id = 0;
const int App2_id = 1;
const int ExtApp_id = 2;


bool is_rep_updated_with_L()
{
bool update = false;
    if (l_rep_data_struct[2]!= rep_data_struct[2]){
    update = true;
    }
return update;
}


void update_internal_states()
{

rep_data_struct[App1_id]:=internal_value[App1_id];
rep_data_struct[App2_id]:=internal_value[App2_id];

}

void update_external_states()
{
l_rep_data_struct[App1_id]:=rep_data_struct[App1_id];
l_rep_data_struct[App2_id]:=rep_data_struct[App2_id];
rep_data_struct[ExtApp_id]:=l_rep_data_struct[ExtApp_id];
}

void update_all()
{
rep_data_struct:=l_rep_data_struct;
}



void send_update_to_leader()
{
l_rep_data_struct[App1_id]:=rep_data_struct[App1_id];
l_rep_data_struct[App2_id]:=rep_data_struct[App2_id];
rep_data_struct[ExtApp_id]:=l_rep_data_struct[ExtApp_id];
pre_last[App1_id]:=rep_data_struct[App1_id];
pre_last[App2_id]:=rep_data_struct[App2_id];

}





bool is_L_updated_with_rep()
{
bool update = false;
    if (rep_data_struct[0]&lt;= l_rep_data_struct[0] || rep_data_struct[1]&lt;= l_rep_data_struct[1]) {
    update = true;
    }
return update;
}


void update_pre()
{
pre_last[App1_id]:=rep_data_struct[App1_id];
pre_last[App2_id]:=rep_data_struct[App2_id];
}






















//test function()

//bool is_L_updated_with_rep()
//{
//bool update = false;
//    if (rep_data_struct[0]!= l_rep_data_struct[0] || rep_data_struct[1]!= l_rep_data_struct[1]) {
//    update = true;
//    }
//return update;
//}




</declaration>
		<location id="id15" x="-1062" y="-425">
			<name x="-1037" y="-450">Send_Receiv_state_var</name>
			<committed/>
		</location>
		<location id="id16" x="-1181" y="-289">
			<name x="-1215" y="-255">External_sync</name>
			<committed/>
		</location>
		<location id="id17" x="-1462" y="-289">
			<name x="-1487" y="-272">Local_sync</name>
			<committed/>
		</location>
		<location id="id18" x="-1190" y="-527">
			<name x="-1200" y="-561">Full_sync</name>
			<committed/>
		</location>
		<location id="id19" x="-1462" y="-527">
			<name x="-1530" y="-561">SC_deployment</name>
			<committed/>
		</location>
		<location id="id20" x="-1326" y="-416">
			<name x="-1336" y="-450">Failure</name>
		</location>
		<location id="id21" x="-858" y="-425">
			<name x="-868" y="-459">Synchronized</name>
			<committed/>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id15"/>
			<target ref="id21"/>
			<label kind="guard" x="-986" y="-374">is_rep_updated_with_L()</label>
			<label kind="synchronisation" x="-977" y="-348">update_L_to_SC?</label>
			<label kind="assignment" x="-986" y="-331">update_external_states(),
synch:=1</label>
			<nail x="-1003" y="-374"/>
			<nail x="-892" y="-374"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id21"/>
			<label kind="guard" x="-1037" y="-561">is_L_updated_with_rep()</label>
			<label kind="synchronisation" x="-1028" y="-544">update_SC_to_L!</label>
			<label kind="assignment" x="-1045" y="-527">send_update_to_leader(),
synch:=1</label>
			<nail x="-1021" y="-493"/>
			<nail x="-919" y="-493"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id15"/>
			<label kind="assignment" x="-1044" y="-425">synch:=0</label>
			<nail x="-969" y="-425"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-1308" y="-488">error[Fid]?</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-1419" y="-510">recovery[Fid]?</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-1308" y="-437">error[Fid]?</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-1385" y="-391">error[Fid]?</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-1308" y="-369">error[Fid]?</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id15"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="assignment" x="-1385" y="-280">update_external_states()</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="guard" x="-1606" y="-374">is_rep_data_struct_empty()==false</label>
			<label kind="assignment" x="-1564" y="-348">update_internal_states()</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="-1419" y="-586">is_rep_data_struct_empty()</label>
			<label kind="assignment" x="-1368" y="-561">update_all()</label>
		</transition>
	</template>
	<template>
		<name>Leader</name>
		<declaration>// external_value is an array that represet the state value of applications which are in other nodes. These values come from the Leader
int external_value [num_ext_apps];

void external_sync_increase()
{
external_value[0]:= (external_value[0]+1)%3;
l_rep_data_struct[2]:=external_value[0];
}</declaration>
		<location id="id22" x="-433" y="-51">
			<name x="-493" y="-51">Leader</name>
		</location>
		<init ref="id22"/>
		<transition>
			<source ref="id22"/>
			<target ref="id22"/>
			<label kind="assignment" x="-510" y="68">external_sync_increase()</label>
			<nail x="-391" y="59"/>
			<nail x="-476" y="68"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-569" y="-85">update_SC_to_L?</label>
			<nail x="-493" y="-136"/>
			<nail x="-391" y="-144"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-391" y="-76">update_L_to_SC!</label>
			<nail x="-289" y="-144"/>
			<nail x="-264" y="-25"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
//Process = Template();
// List one or more processes to be composed into a system.
A0= Application(0,0);
A1=Application(1,1);
//T = App_Trigger();
S = Storage(2);
L = Leader();
A0F= App_Failure(0);
A1F= App_Failure(1);
SF= App_Failure(2);
NF= Node_Failure();
//O=Observer();

system A0,A1,S,L,A0F,A1F,SF,NF;
    </system>
	<queries>
		<query>
			<formula>NF.Node_Failure --&gt;NF.All_recovered</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] A1.App_deployment imply internal_value[1] == 0
</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] A0.App_deployment imply internal_value[0] == 0
</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] A1.App_execution imply  rep_data_struct[1] == last_committed[1] </formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] NF.All_recovered imply A0.App_deployment</formula>
			<comment>A[] A1.App_execution imply  last_internal_value[1]-1==rep_data_struct[1] || rep_data_struct[1] == last_internal_value[1]

Add a property in which we show that the replicated data structure value is equal to the last or one before that.</comment>
		</query>
		<query>
			<formula>A[] A1.App_execution imply  rep_data_struct[1] == last_committed[1]||rep_data_struct[1] == pre_last[1]</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] A0.App_execution imply   last_committed[0]-1==rep_data_struct[0] || rep_data_struct[0] == last_committed[0]</formula>
			<comment></comment>
		</query>
		<query>
			<formula>true --&gt; rep_data_struct == l_rep_data_struct</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A0.Volume_write --&gt; A0.Rep_data_struct_write</formula>
			<comment></comment>
		</query>
		<query>
			<formula>NF.Node_Failure --&gt; S.Full_sync</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; NF.Node_Failure imply S.Full_sync</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E[] NF.Node_Failure imply NF.All_recovered</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; rep_data_struct == l_rep_data_struct</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] A0.App_execution imply internal_value[0]==rep_data_struct[0]</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] S.Synchronized imply synch</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] S.Synchronized imply rep_data_struct == l_rep_data_struct</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; A0.Failure imply A0.App_deployment</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] S.Synchronized imply rep_data_struct == l_rep_data_struct</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] S.Send_Receiv_state_var imply rep_data_struct == l_rep_data_struct</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; S.Send_Receiv_state_var imply rep_data_struct == l_rep_data_struct</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E[] S.Send_Receiv_state_var imply rep_data_struct == l_rep_data_struct</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; S.Send_Receiv_state_var imply rep_data_struct == l_rep_data_struct</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; S.Send_Receiv_state_var</formula>
			<comment></comment>
		</query>
		<query>
			<formula>S.SC_deployment --&gt;S.Local_sync imply rep_data_struct[0] == 0 &amp;&amp; rep_data_struct[1] == 0 &amp;&amp; rep_data_struct[2] == 0  </formula>
			<comment></comment>
		</query>
		<query>
			<formula>S.SC_deployment --&gt;S.Full_sync imply rep_data_struct[0] == 0 &amp;&amp; rep_data_struct[1] == 0 &amp;&amp; rep_data_struct[2] == 0  </formula>
			<comment></comment>
		</query>
		<query>
			<formula>A0.Failure --&gt; A0.App_deployment</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; S.Synchronized</formula>
			<comment></comment>
		</query>
		<query>
			<formula>NF.Node_Failure --&gt; S.Failure</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] A0.Failure imply A0.App_deployment</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] NF.Node_Failure imply A0.Failure</formula>
			<comment></comment>
		</query>
		<query>
			<formula>NF.Node_Failure --&gt; A1.Failure</formula>
			<comment></comment>
		</query>
		<query>
			<formula>NF.Node_Failure --&gt; A0.Failure</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] !deadlock</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
